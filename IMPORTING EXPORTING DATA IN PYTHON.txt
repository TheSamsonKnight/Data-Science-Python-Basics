IMPORTING AND EXPORTING DATA IN PYTHON
============================================================================================================================================================================================================
IMPORTING DATA
-DATA AQUISTION: THE PROCESSING OF LOADING AND READING DATA FROM VARIOUS SOURCES
-IMPORTANT PROPERTIES:
	-FORMAT: THE WAT DATA IS ENCODED, THE ENDING OF THE FILE NAME REVEALS CODING SCHEMES
		-JSON, CSV, XLSX, HDF
	-FILE PATH: WHERE DATA IS STORED
		-COMPUTER, INTERNET
-IMPORTING CSV:
	IMPORT PANDAS AS PD
	URL = "HTTPS://WWW..."
	DF = PD.READ_CSV(URL)	***ASSUMES CSV HAS HEADER
>>	DF = PD.READ_CSV(URL, HEADDER = NONE)
-PRINTING DATAFRAME:
	-DF PRINTS ENTIRE DATAFRAME(NOT RECOMMENDED FOR LARFE DATASETS)
	-DF.HEAD(N) SHOWS THE FIRST N ROWS OF DATAFRAME
	-DF.TAIL(N) SHOWS THE BOTTOM N ROWS OF DATAFRAME
-ADDING HEADERS:
	-REPLACE DEFAULT HEADERS > DF.COULMNS = HEADERS
-EXPORTING A PANDAS DF TO CSV
	-PRESERVES PROGRESS ANYTIME BY SAVING MODIFIED DATASET 
		-PATH="C:/WINDOWS/....CSV"
		 DF.TO_CSV(PATH)
-EXPORTING TO DIFF FORMATS IN PYTHON:
	FORMAT		READ		SAVE
	CSV		PD.READ_CSV()	DF.TO_CSV()
	JSON		PD.READ_JSON()	DF.TO_JSON()
	EXCEL		PD.READ_EXCEL()	DF.TO_EXCEL()
	SQL		PD.READ_SQL()	DF.TO_SQL()
============================================================================================================================================================================================================
-UNDERSTAND YOUR DATA BEFORE YOU BEGIN ANY ANALYSIS
-SHOULD CHECK DATA TYPES, DATA DISTRIBUTION
-LOCATE POTENTIAL ISSUES WITH THE DATA

DATASET INSIGHT
PANDAS TYPE		NATIVE PYTHON TYPE
OBJECT			STRING
INT64			INT
FLOAT64			FLOAT
DATETIME64/TIMEDELTA	N/A

-WHY CHECK DATATYPE?
-PANDAS AUTO ASSIGNS TYPES BASED ON ENCODING FROM ORIGINAL TABLE
	-POTENTIAL INFO AND TYPE MISMATCH
-ALLOWS EXPERIENCED DS TO C WHICH PYTHON FUNCTIONS CAN BE APPLIED TO SPECIFIC COLUMNS
	-COMPATIBILITY WITH PYTHON METHODS
-IN PANDAS, USE DATAFRAME.DTYPES TO CHECK DATA TYPES
-DATAFRAME.DESCRIBE() RETURNS A STATISTICAL SUMMARY
	-DF.DESCRIBE(INCLUDE="ALL") PROVIDES FULL SUMMARY STATS
	-DF.INFO() PROVIDES A CONCISE SUMMARY OF DATAFRAME
============================================================================================================================================================================================================
ACCESSING DB USING PYTHON
USER <> JUPYTER NB/PYTHON PROGRAMS <API CALLS> DBMS
-SQL API CALLS: SET OF FUNCTIONS USED TO GET ACCESS TO SOME TYPE OF SERVICE, CONSISTS OF LIBRARY FUNCTIONS CALLS AN API FOR THE DBMS
	-TO PASS SQL STATEMENTS TO DBMS, APP-PROGRAM CALLS FUNCTIONS IN API AND CALLS OTHER FUNCTIONS TO RETRIEVE QUERY RESULTS AND STATUS INFO FROM DBMS

-BASIC OPERATION OF SQL API:
APPLICATION PROGRAM					DBMS
		CONNECT(DB, USER, PW)                	>>>
		SEND("UPDATE EMP SET, ETC...)		>>>
		EXECUTE()				>>>
		STATUS CHECK()				>>>
		<<<					OK
		DISCONNECT				>>>
============================================================================================================================================================================================================
-DB API: PYTHON STANDARD API FOR ACCESSING RELATIONAL DATABASES
	-STANDARD THAT ALLOWS YOU TO WRITE A SINGLE PROGRAM THAT WORKS WITH MULTIPLE KINDS OF RDB 	INSTEAD OF WRITING A SEPARATE PROGRAM FOR EACH ONE
	-CONNECTION OBJECTS: USE CONNECTIO OBJECTS TO CONNECT TO A DB AND MANAGE YOUR TRANSACTIONS
		-DATABASE CONNECTIONS
		-MANAGE TRANSACTIONS
	-CURSOR OBJECTS: USED TO RUN QUERIES
		-DATABASE QURIES	
	-QUERY OBJECTS

CONNECTION METHODS:
-CURSOR(): RETURNS A NEW CURSOR OBJECT USING THE CONNECTION
-COMMIT(): USED TO COMMIT ANY PENDING TRANSACTIONS TO THE DB
-ROLLBACK(): CAUSES THE DB TO ROLL BACK TO THE START OF ANY PENDING TRANSACTION
-CLOSE(): USED TO CLOSE THE CONNECTION TO DB

-CREATE CONNECTION OBJECT: CONNECTION = CONNECT('DB NAME', 'USERNAME', 'PW')
-CREATE CURSOR OBJECT: CURSOR = CONNECTION.CURSOR()
-RUN QUERIES: CURSOR.EXECUTE('SELECT * FROM MYTABLE')
		RESULTS = CURSOR.FETCHALL()
-FREE RESOURCES(CLOSE): CURSOR.CLOSE()
			CONNECTION.CLOSE()

